{
  "openapi": "3.0.0",
  "info": {
    "title": "Scalytics Copilot API",
    "version": "4.0.1",
    "description": "API documentation for Scalytics Copilot, including the OpenAI-compatible Scalytics API."
  },
  "servers": [
    {
      "url": "/",
      "description": "Current Server"
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Scalytics API Key"
      }
    },
    "schemas": {
      "ChatMessage": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "system",
              "user",
              "assistant"
            ],
            "description": "The role of the message author."
          },
          "content": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "text",
                        "image_url"
                      ],
                      "description": "The type of the content part."
                    },
                    "text": {
                      "type": "string",
                      "description": "The text content, if type is 'text'."
                    },
                    "image_url": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string",
                          "format": "uri",
                          "description": "The URL of the image (http, https, or data URI)."
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "description": "The image URL details, if type is 'image_url'."
                    }
                  }
                }
              }
            ],
            "description": "The content of the message. Can be a string or an array of content parts (for multimodal input)."
          }
        }
      },
      "ChatCompletionRequest": {
        "type": "object",
        "required": [
          "messages"
        ],
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            },
            "description": "A list of messages comprising the conversation history."
          },
          "stream": {
            "type": "boolean",
            "default": false,
            "description": "Whether to stream back partial progress."
          },
          "temperature": {
            "type": "number",
            "format": "float",
            "minimum": 0,
            "maximum": 2,
            "description": "Controls randomness. Lower values make the output more deterministic."
          },
          "max_tokens": {
            "type": "integer",
            "description": "The maximum number of tokens to generate in the completion."
          },
          "top_p": {
            "type": "number",
            "format": "float",
            "minimum": 0,
            "maximum": 1,
            "description": "Nucleus sampling parameter."
          },
          "frequency_penalty": {
            "type": "number",
            "format": "float",
            "minimum": -2,
            "maximum": 2,
            "description": "Penalizes new tokens based on their existing frequency in the text so far."
          },
          "presence_penalty": {
            "type": "number",
            "format": "float",
            "minimum": -2,
            "maximum": 2,
            "description": "Penalizes new tokens based on whether they appear in the text so far."
          },
          "model": {
            "type": "string",
            "description": "Optional ID of the model to use. Currently ignored by the server."
          },
          "stream_options": {
            "type": "object",
            "properties": {
              "include_usage": {
                "type": "boolean",
                "description": "If set, reports token usage stats in a final stream chunk before the stream termination."
              }
            },
            "description": "Options for streaming responses."
          }
        }
      },
      "DeepSearchApiRequest": {
        "type": "object",
        "required": [
          "query",
          "reasoningModelName",
          "synthesisModelName"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "The user's initial search query or topic."
          },
          "reasoningModelName": {
            "type": "string",
            "description": "Required. Name/ID of the LLM for planning and intermediate reasoning. Use GET /v1/models to see available models."
          },
          "synthesisModelName": {
            "type": "string",
            "description": "Required. Name/ID of the LLM for final report synthesis. Use GET /v1/models to see available models."
          },
          "search_providers": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "google",
                "bing",
                "brave",
                "openalex",
                "wikipedia",
                "duckduckgo"
              ]
            },
            "description": "Search providers. Defaults to a standard set if not provided.",
            "default": []
          },
          "max_distinct_search_queries": {
            "type": "integer",
            "description": "Max distinct search engine queries.",
            "default": 7
          },
          "max_results_per_provider_query": {
            "type": "integer",
            "description": "Max search results per provider per query.",
            "default": 5
          },
          "max_url_exploration_depth": {
            "type": "integer",
            "description": "Max depth for exploring links. Defaults are handled by the Python service configuration."
          },
          "max_hops": {
            "type": "integer",
            "description": "Max research hops/iterations. Defaults are handled by the Python service configuration."
          },
          "chunk_size_words": {
            "type": "integer",
            "description": "Target chunk size in words. Defaults are handled by the Python service configuration."
          },
          "chunk_overlap_words": {
            "type": "integer",
            "description": "Target chunk overlap in words. Defaults are handled by the Python service configuration."
          },
          "top_k_retrieval_per_hop": {
            "type": "integer",
            "description": "Top-K chunks to retrieve from vector store per hop. Defaults are handled by the Python service configuration."
          }
        }
      },
      "EmbedTextsApiRequest": {
        "type": "object",
        "required": [
          "texts"
        ],
        "properties": {
          "texts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of text strings to be embedded.",
            "example": [
              "Hello world",
              "How are you?"
            ]
          },
          "model_identifier": {
            "type": "string",
            "description": "Optional identifier (e.g., ID or name) of the embedding model to use. If None, the service's default will be used.",
            "example": "sentence-transformers/all-MiniLM-L6-v2"
          }
        }
      },
      "EmbedTextsApiResponseData": {
        "type": "object",
        "properties": {
          "embeddings": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "float"
              }
            },
            "description": "A list of embedding vectors, corresponding to the input texts."
          },
          "model_used": {
            "type": "string",
            "description": "Identifier of the embedding model that was actually used."
          },
          "dimension": {
            "type": "integer",
            "description": "The dimensionality of the returned embedding vectors."
          }
        }
      },
      "EmbedTextsApiSuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/EmbedTextsApiResponseData"
          }
        }
      },
      "DocumentItemInput": {
        "type": "object",
        "required": [
          "text_content"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Optional unique ID for the document item. If not provided, it might be auto-generated by the backend."
          },
          "text_content": {
            "type": "string",
            "description": "The actual text content to be embedded and stored."
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true,
            "description": "Arbitrary metadata associated with the document."
          }
        }
      },
      "AddDocumentsApiRequest": {
        "type": "object",
        "required": [
          "documents",
          "group_id"
        ],
        "properties": {
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentItemInput"
            },
            "description": "A list of document items to add."
          },
          "group_id": {
            "type": "string",
            "description": "An identifier to group these documents (e.g., user ID, session ID, collection name)."
          }
        }
      },
      "GeneralApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the operation was successful."
          },
          "message": {
            "type": "string",
            "description": "A message describing the outcome of the operation."
          },
          "details": {
            "type": "object",
            "additionalProperties": true,
            "description": "Optional additional details from the operation."
          }
        }
      },
      "VectorSearchApiRequest": {
        "type": "object",
        "required": [
          "query_text"
        ],
        "properties": {
          "query_text": {
            "type": "string",
            "description": "The text to search for."
          },
          "group_id": {
            "type": "string",
            "description": "Optional group ID to scope the search within."
          },
          "top_k": {
            "type": "integer",
            "description": "Number of top results to return.",
            "default": 5,
            "minimum": 1,
            "maximum": 100
          }
        }
      },
      "VectorSearchResultItemApi": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true,
            "description": "ID of the matching document item."
          },
          "text_content": {
            "type": "string",
            "description": "The text content of the matching chunk."
          },
          "metadata": {
            "type": "object",
            "additionalProperties": true,
            "description": "Metadata of the original document."
          },
          "distance": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "description": "Distance score from the query vector."
          },
          "similarity": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "description": "Similarity score."
          }
        }
      },
      "VectorSearchApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the search operation was successful."
          },
          "message": {
            "type": "string",
            "description": "A message describing the outcome of the search."
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VectorSearchResultItemApi"
            },
            "description": "List of search result items."
          },
          "details": {
            "type": "object",
            "nullable": true,
            "description": "Optional additional details from the operation."
          }
        }
      },
      "DeleteVectorGroupApiRequest": {
        "type": "object",
        "required": [
          "group_id"
        ],
        "properties": {
          "group_id": {
            "type": "string",
            "description": "The ID of the group whose vector documents should be deleted."
          }
        }
      },
      "ModelInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the model."
          },
          "object": {
            "type": "string",
            "example": "model",
            "description": "The object type, which is always \"model\"."
          },
          "created": {
            "type": "integer",
            "format": "int64",
            "description": "Unix timestamp of when the model was created or registered."
          },
          "owned_by": {
            "type": "string",
            "description": "Identifier for the owner of the model (e.g., \"system\", \"openai\", provider name)."
          },
          "root": {
            "type": "string",
            "description": "The root model ID, often the same as 'id' for base models."
          },
          "parent": {
            "type": "string",
            "nullable": true,
            "description": "The parent model ID if this is a fine-tuned model."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "A description of the model."
          },
          "context_window": {
            "type": "integer",
            "nullable": true,
            "description": "The context window size for the model."
          }
        }
      },
      "ModelListApiResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "example": "list"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModelInfo"
            }
          }
        }
      }
    }
  },
  "paths": {
    "/v1/models": {
      "get": {
        "summary": "Lists the models available to the authenticated user.",
        "tags": [
          "Scalytics API"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of available models.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelListApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid API key)"
          },
          "403": {
            "description": "Forbidden (API globally disabled)"
          },
          "429": {
            "description": "Too Many Requests (Rate limit exceeded)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/v1/chat/completions": {
      "post": {
        "summary": "Creates a model response for the given chat conversation using the configured local model.",
        "tags": [
          "Scalytics API"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatCompletionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK. Returns either a completion object or a stream of chunks.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "object": {
                      "type": "string",
                      "example": "chat.completion"
                    },
                    "created": {
                      "type": "integer"
                    },
                    "model": {
                      "type": "string"
                    },
                    "choices": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ChatMessage"
                      }
                    },
                    "usage": {
                      "type": "object",
                      "properties": {
                        "prompt_tokens": {
                          "type": "integer"
                        },
                        "completion_tokens": {
                          "type": "integer"
                        },
                        "total_tokens": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              },
              "text/event-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "object": {
                      "type": "string",
                      "example": "chat.completion.chunk"
                    },
                    "created": {
                      "type": "integer"
                    },
                    "model": {
                      "type": "string"
                    },
                    "choices": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "delta": {
                            "$ref": "#/components/schemas/ChatMessage"
                          },
                          "finish_reason": {
                            "type": "string",
                            "nullable": true
                          }
                        }
                      }
                    },
                    "usage": {
                      "type": "object",
                      "nullable": true,
                      "properties": {
                        "prompt_tokens": {
                          "type": "integer"
                        },
                        "completion_tokens": {
                          "type": "integer"
                        },
                        "total_tokens": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., invalid input)"
          },
          "401": {
            "description": "Unauthorized (invalid API key)"
          },
          "403": {
            "description": "Forbidden (API globally disabled)"
          },
          "429": {
            "description": "Too Many Requests (Rate limit exceeded)"
          },
          "500": {
            "description": "Internal Server Error (e.g., no local model configured)"
          },
          "503": {
            "description": "Service Unavailable (API globally disabled)"
          }
        }
      }
    },
    "/v1/deepsearch": {
      "post": {
        "summary": "Initiates a Deep Search task and streams results via Server-Sent Events (SSE).",
        "tags": [
          "Scalytics API"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeepSearchApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK. Returns a Server-Sent Events (SSE) stream. The stream will contain events like 'progress', 'markdown_chunk', 'complete', 'error', 'cancelled'.",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "example": "event: progress\ndata: {\"stage\":\"planning\",\"message\":\"Generating research plan...\"}\n\nevent: markdown_chunk\ndata: {\"chunk_id\":0,\"content\":\"This is a part of the report.\"}\n\nevent: complete\ndata: {\"message\":\"Research completed successfully.\"}\n"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., invalid input parameters)"
          },
          "401": {
            "description": "Unauthorized (invalid API key)"
          },
          "403": {
            "description": "Forbidden (Feature globally disabled or insufficient permissions)"
          },
          "429": {
            "description": "Too Many Requests (Rate limit exceeded)"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable (e.g., Python backend for Deep Search is not ready)"
          }
        }
      }
    },
    "/v1/vector/embeddings": {
      "post": {
        "summary": "Generates embeddings for a list of text strings.",
        "tags": [
          "Scalytics API",
          "Vector Service"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbedTextsApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK. Returns the generated embeddings and model information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmbedTextsApiSuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., invalid input parameters)"
          },
          "401": {
            "description": "Unauthorized (invalid API key)"
          },
          "403": {
            "description": "Forbidden (Feature globally disabled or insufficient permissions)"
          },
          "429": {
            "description": "Too Many Requests (Rate limit exceeded)"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable (e.g., Python backend for embeddings is not ready)"
          }
        }
      }
    },
    "/v1/vector/documents": {
      "post": {
        "summary": "Adds a list of documents to the vector store.",
        "tags": [
          "Scalytics API",
          "Vector Service"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDocumentsApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK. Documents processed (check success field for outcome).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., invalid input parameters)"
          },
          "401": {
            "description": "Unauthorized (invalid API key)"
          },
          "403": {
            "description": "Forbidden (Feature globally disabled or insufficient permissions)"
          },
          "429": {
            "description": "Too Many Requests (Rate limit exceeded)"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable (e.g., Python backend for vector operations is not ready)"
          }
        }
      }
    },
    "/v1/vector/search": {
      "post": {
        "summary": "Searches vector documents based on a query text.",
        "tags": [
          "Scalytics API",
          "Vector Service"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VectorSearchApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK. Returns search results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VectorSearchApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., invalid input parameters)"
          },
          "401": {
            "description": "Unauthorized (invalid API key)"
          },
          "403": {
            "description": "Forbidden (Feature globally disabled or insufficient permissions)"
          },
          "429": {
            "description": "Too Many Requests (Rate limit exceeded)"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable (e.g., Python backend for vector operations is not ready)"
          }
        }
      }
    },
    "/v1/vector/groups/delete": {
      "post": {
        "summary": "Deletes all vector documents associated with a specific group ID.",
        "tags": [
          "Scalytics API",
          "Vector Service"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteVectorGroupApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK. Documents for the group processed for deletion (check success field).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., invalid group_id)"
          },
          "401": {
            "description": "Unauthorized (invalid API key)"
          },
          "403": {
            "description": "Forbidden (Feature globally disabled or insufficient permissions)"
          },
          "429": {
            "description": "Too Many Requests (Rate limit exceeded)"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable (e.g., Python backend for vector operations is not ready)"
          }
        }
      }
    },
    "/v1/images/generations": {
      "post": {
        "summary": "Creates an image given a prompt.",
        "tags": [
          "Scalytics API"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "model",
                  "prompt"
                ],
                "properties": {
                  "model": {
                    "type": "string",
                    "description": "ID of the model to use for image generation."
                  },
                  "prompt": {
                    "type": "string",
                    "description": "A text description of the desired image(s)."
                  },
                  "n": {
                    "type": "integer",
                    "default": 1,
                    "description": "The number of images to generate. (Currently only 1 is supported)."
                  },
                  "size": {
                    "type": "string",
                    "default": "1024x1024",
                    "enum": [
                      "256x256",
                      "512x512",
                      "1024x1024",
                      "1792x1024",
                      "1024x1792"
                    ],
                    "description": "The size of the generated images."
                  },
                  "response_format": {
                    "type": "string",
                    "default": "b64_json",
                    "enum": [
                      "url",
                      "b64_json"
                    ],
                    "description": "The format in which the generated images are returned."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK. Returns the generated image data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Unix timestamp of when the image was created."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "b64_json": {
                            "type": "string",
                            "format": "byte",
                            "description": "The base64-encoded JSON of the generated image, if response_format is 'b64_json'."
                          },
                          "url": {
                            "type": "string",
                            "format": "uri",
                            "description": "The URL of the generated image, if response_format is 'url'."
                          },
                          "suggested_filename": {
                            "type": "string",
                            "description": "A suggested filename for the generated image (e.g., 'my-prompt-image.png')."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., invalid input parameters, model does not support image generation)"
          },
          "401": {
            "description": "Unauthorized (invalid API key)"
          },
          "403": {
            "description": "Forbidden (API globally disabled or insufficient permissions)"
          },
          "404": {
            "description": "Not Found (Model not found)"
          },
          "429": {
            "description": "Too Many Requests (Rate limit exceeded)"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "501": {
            "description": "Not Implemented (Image generation not implemented for the specified provider)"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Scalytics API",
      "description": "OpenAI-compatible API for local models"
    }
  ]
}
